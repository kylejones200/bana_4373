Traceback (most recent call last):
  File "/opt/anaconda3/lib/python3.7/site-packages/jupyter_cache/executors/utils.py", line 56, in single_nb_execution
    record_timing=False,
  File "/opt/anaconda3/lib/python3.7/site-packages/nbclient/client.py", line 1112, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/anaconda3/lib/python3.7/site-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/anaconda3/lib/python3.7/site-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/opt/anaconda3/lib/python3.7/asyncio/base_events.py", line 579, in run_until_complete
    return future.result()
  File "/opt/anaconda3/lib/python3.7/site-packages/nbclient/client.py", line 554, in async_execute
    cell, index, execution_count=self.code_cells_executed + 1
  File "/opt/anaconda3/lib/python3.7/site-packages/nbclient/client.py", line 857, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/opt/anaconda3/lib/python3.7/site-packages/nbclient/client.py", line 760, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import requests # this lets us call the API to the external website
import pandas as pd

def getdata(stock: str):
    """This function gets data from the API and returns specific values
    :param stock: Official stock ticker symbol
    
    :returns share_price: Array of current share price
    :returns cash: Array of cash on hand 
    :returns debt: Array of debt
    :returns qRev: Array of quarterly revenue
    :returns ceo: Name of the CEO 
    """
    # Company Quote Group of Items
    company_quote = requests.get(f"{base}quote/{stock}?apikey={key}")
    company_quote = company_quote.json()
    share_price = float(company_quote[0]['price'])

    # Balance Sheet Group of Items
    BS = requests.get(f"{base}financials/balance-sheet-statement/{stock}?period=quarter&apikey={key}")
    BS = BS.json()

    # Total Cash
    cash = float(BS['financials'][0]['Cash and short-term investments'])
    # Total Debt
    debt = float(BS['financials'][0]['Total debt'])

    # Income Statement Group of Items
    IS = requests.get(f"{base}financials/income-statement/{stock}?period=quarter&apikey={key}")
    IS = IS.json()

    # Most Recent Quarterly Revenue
    qRev = float(IS['financials'][0]['Revenue'])

    # Company Profile Group of Items
    company_info = requests.get(f"{base}company/profile/{stock}?apikey={key}")
    company_info = company_info.json()

    # Chief Executive Officer
    ceo = company_info['profile']['ceo']

    return (share_price, cash, debt, qRev, ceo)

base = 'https://financialmodelingprep.com/api/v3/'
key = 'ac711b8ed8ca5245691b502cb9c3e105'
tickers = ('AAPL', 'MSFT', 'GOOG', 'T', 'CSCO', 'INTC', 'ORCL', 'AMZN', 'FB', 'TSLA', 'NVDA')
    
data = map(getdata, tickers)   

quarter = '1Q2020'

df = pd.DataFrame(data,
                    columns=['Share Price ($)', 'Total Cash', 'Total Debt', f'{quarter} Revenue', 'CEO'],
                    index=tickers)

writer = pd.ExcelWriter('example.xlsx')
df.to_excel(writer, 'Statistics')
writer.save()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mKeyError[0m                                  Traceback (most recent call last)
[0;32m<ipython-input-1-3a39b8c57904>[0m in [0;36m<module>[0;34m[0m
[1;32m     52[0m df = pd.DataFrame(data,
[1;32m     53[0m                     [0mcolumns[0m[0;34m=[0m[0;34m[[0m[0;34m'Share Price ($)'[0m[0;34m,[0m [0;34m'Total Cash'[0m[0;34m,[0m [0;34m'Total Debt'[0m[0;34m,[0m [0;34mf'{quarter} Revenue'[0m[0;34m,[0m [0;34m'CEO'[0m[0;34m][0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 54[0;31m                     index=tickers)
[0m[1;32m     55[0m [0;34m[0m[0m
[1;32m     56[0m [0mwriter[0m [0;34m=[0m [0mpd[0m[0;34m.[0m[0mExcelWriter[0m[0;34m([0m[0;34m'example.xlsx'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m/opt/anaconda3/lib/python3.7/site-packages/pandas/core/frame.py[0m in [0;36m__init__[0;34m(self, data, index, columns, dtype, copy)[0m
[1;32m    443[0m         [0;32melif[0m [0misinstance[0m[0;34m([0m[0mdata[0m[0;34m,[0m [0mabc[0m[0;34m.[0m[0mIterable[0m[0;34m)[0m [0;32mand[0m [0;32mnot[0m [0misinstance[0m[0;34m([0m[0mdata[0m[0;34m,[0m [0;34m([0m[0mstr[0m[0;34m,[0m [0mbytes[0m[0;34m)[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    444[0m             [0;32mif[0m [0;32mnot[0m [0misinstance[0m[0;34m([0m[0mdata[0m[0;34m,[0m [0mabc[0m[0;34m.[0m[0mSequence[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 445[0;31m                 [0mdata[0m [0;34m=[0m [0mlist[0m[0;34m([0m[0mdata[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    446[0m             [0;32mif[0m [0mlen[0m[0;34m([0m[0mdata[0m[0;34m)[0m [0;34m>[0m [0;36m0[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    447[0m                 [0;32mif[0m [0mis_list_like[0m[0;34m([0m[0mdata[0m[0;34m[[0m[0;36m0[0m[0;34m][0m[0;34m)[0m [0;32mand[0m [0mgetattr[0m[0;34m([0m[0mdata[0m[0;34m[[0m[0;36m0[0m[0;34m][0m[0;34m,[0m [0;34m"ndim"[0m[0;34m,[0m [0;36m1[0m[0;34m)[0m [0;34m==[0m [0;36m1[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m<ipython-input-1-3a39b8c57904>[0m in [0;36mgetdata[0;34m(stock)[0m
[1;32m     22[0m [0;34m[0m[0m
[1;32m     23[0m     [0;31m# Total Cash[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 24[0;31m     [0mcash[0m [0;34m=[0m [0mfloat[0m[0;34m([0m[0mBS[0m[0;34m[[0m[0;34m'financials'[0m[0;34m][0m[0;34m[[0m[0;36m0[0m[0;34m][0m[0;34m[[0m[0;34m'Cash and short-term investments'[0m[0;34m][0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     25[0m     [0;31m# Total Debt[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m     26[0m     [0mdebt[0m [0;34m=[0m [0mfloat[0m[0;34m([0m[0mBS[0m[0;34m[[0m[0;34m'financials'[0m[0;34m][0m[0;34m[[0m[0;36m0[0m[0;34m][0m[0;34m[[0m[0;34m'Total debt'[0m[0;34m][0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;31mKeyError[0m: 'financials'
KeyError: 'financials'

