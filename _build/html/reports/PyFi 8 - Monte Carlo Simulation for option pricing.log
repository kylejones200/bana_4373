Traceback (most recent call last):
  File "/opt/anaconda3/lib/python3.7/site-packages/jupyter_cache/executors/utils.py", line 56, in single_nb_execution
    record_timing=False,
  File "/opt/anaconda3/lib/python3.7/site-packages/nbclient/client.py", line 1112, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/anaconda3/lib/python3.7/site-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/anaconda3/lib/python3.7/site-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/opt/anaconda3/lib/python3.7/asyncio/base_events.py", line 579, in run_until_complete
    return future.result()
  File "/opt/anaconda3/lib/python3.7/site-packages/nbclient/client.py", line 554, in async_execute
    cell, index, execution_count=self.code_cells_executed + 1
  File "/opt/anaconda3/lib/python3.7/site-packages/nbclient/client.py", line 857, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/opt/anaconda3/lib/python3.7/site-packages/nbclient/client.py", line 760, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
ticker = "AOIL" #Aberdeen Oil - Bloomberg index for WTI
base = 'https://financialmodelingprep.com/api/v3/'
key = '<YOUR KEY HERE>'
target = "{}historical-price-full/{}?apikey={}".format(base, ticker, key)

df = pd.read_json(target)
df = json_normalize(df['historical'])
df['date'] = pd.to_datetime(df['date'])
df.set_index('date', inplace=True)
df.to_csv('AOIL data.csv')
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mInvalidURL[0m                                Traceback (most recent call last)
[0;32m<ipython-input-2-7f6032ac212e>[0m in [0;36m<module>[0;34m[0m
[1;32m      4[0m [0mtarget[0m [0;34m=[0m [0;34m"{}historical-price-full/{}?apikey={}"[0m[0;34m.[0m[0mformat[0m[0;34m([0m[0mbase[0m[0;34m,[0m [0mticker[0m[0;34m,[0m [0mkey[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m      5[0m [0;34m[0m[0m
[0;32m----> 6[0;31m [0mdf[0m [0;34m=[0m [0mpd[0m[0;34m.[0m[0mread_json[0m[0;34m([0m[0mtarget[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      7[0m [0mdf[0m [0;34m=[0m [0mjson_normalize[0m[0;34m([0m[0mdf[0m[0;34m[[0m[0;34m'historical'[0m[0;34m][0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m      8[0m [0mdf[0m[0;34m[[0m[0;34m'date'[0m[0;34m][0m [0;34m=[0m [0mpd[0m[0;34m.[0m[0mto_datetime[0m[0;34m([0m[0mdf[0m[0;34m[[0m[0;34m'date'[0m[0;34m][0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m/opt/anaconda3/lib/python3.7/site-packages/pandas/io/json/_json.py[0m in [0;36mread_json[0;34m(path_or_buf, orient, typ, dtype, convert_axes, convert_dates, keep_default_dates, numpy, precise_float, date_unit, encoding, lines, chunksize, compression)[0m
[1;32m    567[0m     [0mcompression[0m [0;34m=[0m [0m_infer_compression[0m[0;34m([0m[0mpath_or_buf[0m[0;34m,[0m [0mcompression[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    568[0m     filepath_or_buffer, _, compression, should_close = get_filepath_or_buffer(
[0;32m--> 569[0;31m         [0mpath_or_buf[0m[0;34m,[0m [0mencoding[0m[0;34m=[0m[0mencoding[0m[0;34m,[0m [0mcompression[0m[0;34m=[0m[0mcompression[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    570[0m     )
[1;32m    571[0m [0;34m[0m[0m

[0;32m/opt/anaconda3/lib/python3.7/site-packages/pandas/io/common.py[0m in [0;36mget_filepath_or_buffer[0;34m(filepath_or_buffer, encoding, compression, mode)[0m
[1;32m    194[0m [0;34m[0m[0m
[1;32m    195[0m     [0;32mif[0m [0m_is_url[0m[0;34m([0m[0mfilepath_or_buffer[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 196[0;31m         [0mreq[0m [0;34m=[0m [0murlopen[0m[0;34m([0m[0mfilepath_or_buffer[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    197[0m         [0mcontent_encoding[0m [0;34m=[0m [0mreq[0m[0;34m.[0m[0mheaders[0m[0;34m.[0m[0mget[0m[0;34m([0m[0;34m"Content-Encoding"[0m[0;34m,[0m [0;32mNone[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    198[0m         [0;32mif[0m [0mcontent_encoding[0m [0;34m==[0m [0;34m"gzip"[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m/opt/anaconda3/lib/python3.7/urllib/request.py[0m in [0;36murlopen[0;34m(url, data, timeout, cafile, capath, cadefault, context)[0m
[1;32m    220[0m     [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    221[0m         [0mopener[0m [0;34m=[0m [0m_opener[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 222[0;31m     [0;32mreturn[0m [0mopener[0m[0;34m.[0m[0mopen[0m[0;34m([0m[0murl[0m[0;34m,[0m [0mdata[0m[0;34m,[0m [0mtimeout[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    223[0m [0;34m[0m[0m
[1;32m    224[0m [0;32mdef[0m [0minstall_opener[0m[0;34m([0m[0mopener[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m/opt/anaconda3/lib/python3.7/urllib/request.py[0m in [0;36mopen[0;34m(self, fullurl, data, timeout)[0m
[1;32m    523[0m             [0mreq[0m [0;34m=[0m [0mmeth[0m[0;34m([0m[0mreq[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    524[0m [0;34m[0m[0m
[0;32m--> 525[0;31m         [0mresponse[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0m_open[0m[0;34m([0m[0mreq[0m[0;34m,[0m [0mdata[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    526[0m [0;34m[0m[0m
[1;32m    527[0m         [0;31m# post-process response[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m

[0;32m/opt/anaconda3/lib/python3.7/urllib/request.py[0m in [0;36m_open[0;34m(self, req, data)[0m
[1;32m    541[0m         [0mprotocol[0m [0;34m=[0m [0mreq[0m[0;34m.[0m[0mtype[0m[0;34m[0m[0;34m[0m[0m
[1;32m    542[0m         result = self._call_chain(self.handle_open, protocol, protocol +
[0;32m--> 543[0;31m                                   '_open', req)
[0m[1;32m    544[0m         [0;32mif[0m [0mresult[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    545[0m             [0;32mreturn[0m [0mresult[0m[0;34m[0m[0;34m[0m[0m

[0;32m/opt/anaconda3/lib/python3.7/urllib/request.py[0m in [0;36m_call_chain[0;34m(self, chain, kind, meth_name, *args)[0m
[1;32m    501[0m         [0;32mfor[0m [0mhandler[0m [0;32min[0m [0mhandlers[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    502[0m             [0mfunc[0m [0;34m=[0m [0mgetattr[0m[0;34m([0m[0mhandler[0m[0;34m,[0m [0mmeth_name[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 503[0;31m             [0mresult[0m [0;34m=[0m [0mfunc[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    504[0m             [0;32mif[0m [0mresult[0m [0;32mis[0m [0;32mnot[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    505[0m                 [0;32mreturn[0m [0mresult[0m[0;34m[0m[0;34m[0m[0m

[0;32m/opt/anaconda3/lib/python3.7/urllib/request.py[0m in [0;36mhttps_open[0;34m(self, req)[0m
[1;32m   1358[0m         [0;32mdef[0m [0mhttps_open[0m[0;34m([0m[0mself[0m[0;34m,[0m [0mreq[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1359[0m             return self.do_open(http.client.HTTPSConnection, req,
[0;32m-> 1360[0;31m                 context=self._context, check_hostname=self._check_hostname)
[0m[1;32m   1361[0m [0;34m[0m[0m
[1;32m   1362[0m         [0mhttps_request[0m [0;34m=[0m [0mAbstractHTTPHandler[0m[0;34m.[0m[0mdo_request_[0m[0;34m[0m[0;34m[0m[0m

[0;32m/opt/anaconda3/lib/python3.7/urllib/request.py[0m in [0;36mdo_open[0;34m(self, http_class, req, **http_conn_args)[0m
[1;32m   1315[0m             [0;32mtry[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1316[0m                 h.request(req.get_method(), req.selector, req.data, headers,
[0;32m-> 1317[0;31m                           encode_chunked=req.has_header('Transfer-encoding'))
[0m[1;32m   1318[0m             [0;32mexcept[0m [0mOSError[0m [0;32mas[0m [0merr[0m[0;34m:[0m [0;31m# timeout error[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1319[0m                 [0;32mraise[0m [0mURLError[0m[0;34m([0m[0merr[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m/opt/anaconda3/lib/python3.7/http/client.py[0m in [0;36mrequest[0;34m(self, method, url, body, headers, encode_chunked)[0m
[1;32m   1242[0m                 encode_chunked=False):
[1;32m   1243[0m         [0;34m"""Send a complete request to the server."""[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1244[0;31m         [0mself[0m[0;34m.[0m[0m_send_request[0m[0;34m([0m[0mmethod[0m[0;34m,[0m [0murl[0m[0;34m,[0m [0mbody[0m[0;34m,[0m [0mheaders[0m[0;34m,[0m [0mencode_chunked[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   1245[0m [0;34m[0m[0m
[1;32m   1246[0m     [0;32mdef[0m [0m_send_request[0m[0;34m([0m[0mself[0m[0;34m,[0m [0mmethod[0m[0;34m,[0m [0murl[0m[0;34m,[0m [0mbody[0m[0;34m,[0m [0mheaders[0m[0;34m,[0m [0mencode_chunked[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m/opt/anaconda3/lib/python3.7/http/client.py[0m in [0;36m_send_request[0;34m(self, method, url, body, headers, encode_chunked)[0m
[1;32m   1253[0m             [0mskips[0m[0;34m[[0m[0;34m'skip_accept_encoding'[0m[0;34m][0m [0;34m=[0m [0;36m1[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1254[0m [0;34m[0m[0m
[0;32m-> 1255[0;31m         [0mself[0m[0;34m.[0m[0mputrequest[0m[0;34m([0m[0mmethod[0m[0;34m,[0m [0murl[0m[0;34m,[0m [0;34m**[0m[0mskips[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   1256[0m [0;34m[0m[0m
[1;32m   1257[0m         [0;31m# chunked encoding will happen if HTTP/1.1 is used and either[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m

[0;32m/opt/anaconda3/lib/python3.7/http/client.py[0m in [0;36mputrequest[0;34m(self, method, url, skip_host, skip_accept_encoding)[0m
[1;32m   1115[0m         [0mmatch[0m [0;34m=[0m [0m_contains_disallowed_url_pchar_re[0m[0;34m.[0m[0msearch[0m[0;34m([0m[0murl[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1116[0m         [0;32mif[0m [0mmatch[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1117[0;31m             raise InvalidURL(f"URL can't contain control characters. {url!r} "
[0m[1;32m   1118[0m                              f"(found at least {match.group()!r})")
[1;32m   1119[0m         [0mrequest[0m [0;34m=[0m [0;34m'%s %s %s'[0m [0;34m%[0m [0;34m([0m[0mmethod[0m[0;34m,[0m [0murl[0m[0;34m,[0m [0mself[0m[0;34m.[0m[0m_http_vsn_str[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;31mInvalidURL[0m: URL can't contain control characters. '/api/v3/historical-price-full/AOIL?apikey=<YOUR KEY HERE>' (found at least ' ')
InvalidURL: URL can't contain control characters. '/api/v3/historical-price-full/AOIL?apikey=<YOUR KEY HERE>' (found at least ' ')

